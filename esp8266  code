#include <ESP8266WiFi.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <ESP8266HTTPClient.h>
#include <ESP8266WebServer.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>
#include <WiFiClientSecureBearSSL.h>

// WiFi Credentials
const char* ssid = "Junior";
const char* password = "02573007jj";
String lineToken = "WP56ldOSeltzZuO3gsSFNSN2jGJUEo3O5lz4jz25Y5w";

// Pin Configuration
#define MQ2_PIN A0
#define FAN_PIN 16
#define SS_PIN 4
#define RST_PIN 5
#define SERVO_PIN 14

LiquidCrystal_I2C lcd(0x27, 16, 2);
ESP8266WebServer server(80);
MFRC522 mfrc522(SS_PIN, RST_PIN);
Servo myServo;

byte allowedUID[] = {0xA1, 0xB2, 0xC3, 0xD4};

int smokeValue = 0;
bool fanStatus = false;
unsigned long lastNotifyTime = 0;
const unsigned long notifyInterval = 60000;

void setup() {
    Serial.begin(115200);
    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
        Serial.print(".");
        delay(500);
    }
    Serial.println("\nWiFi connected successfully!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());

    lcd.begin();
    lcd.setBacklight(true);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("IP: ");
    lcd.print(WiFi.localIP());
    delay(2000);

    pinMode(MQ2_PIN, INPUT);
    pinMode(FAN_PIN, OUTPUT);
    digitalWrite(FAN_PIN, LOW);

    SPI.begin();
    mfrc522.PCD_Init();
    myServo.attach(SERVO_PIN);
    myServo.write(0);

    server.on("/", handleRoot);
    server.on("/fan/on", []() {
        digitalWrite(FAN_PIN, HIGH);
        fanStatus = true;
        Serial.println("Fan Turned ON");
        server.send(200, "text/plain", "Fan Turned ON");
    });

    server.on("/fan/off", []() {
        digitalWrite(FAN_PIN, LOW);
        fanStatus = false;
        Serial.println("Fan Turned OFF");
        server.send(200, "text/plain", "Fan Turned OFF");
    });

    server.begin();
}

void loop() {
    server.handleClient();
    smokeValue = analogRead(MQ2_PIN);
    Serial.print("Smoke Level: ");
    Serial.println(smokeValue);

    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Smoke: ");
    lcd.print(smokeValue);
    lcd.setCursor(0, 1);

    if (smokeValue > 300) {
        lcd.print("Alert! Smoke!");
        if (!fanStatus) {
            digitalWrite(FAN_PIN, HIGH);
            fanStatus = true;
        }
        if (millis() - lastNotifyTime > notifyInterval) {
            sendLineNotify("[ðŸ”¥ ALERT] Smoke Detected! Fan Activated!");
            lastNotifyTime = millis();
        }
    } else {
        lcd.print("Level Normal");
        if (fanStatus) {
            digitalWrite(FAN_PIN, LOW);
            fanStatus = false;
        }
    }
    delay(1000);
}

void handleRoot() {
    String html = "<!DOCTYPE html><html><head><title>Smoke Monitor</title><style>";
    html += "body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }";
    html += "h1 { color: #333; } h2 { color: #555; }";
    html += "button { padding: 10px 20px; margin: 10px; font-size: 18px; cursor: pointer; }";
    html += ".on { background-color: green; color: white; }";
    html += ".off { background-color: red; color: white; }";
    html += "</style></head><body>";
    html += "<h1>Smoke Level: " + String(smokeValue) + "</h1>";
    html += "<h2>Status: " + String((smokeValue > 300) ? "ðŸ”¥ Alert! Smoke Detected" : "âœ… Normal") + "</h2>";
    html += "<button class='on' onclick=\"location.href='/fan/on'\">Turn On Fan</button>";
    html += "<button class='off' onclick=\"location.href='/fan/off'\">Turn Off Fan</button>";
    html += "</body></html>";
    server.send(200, "text/html", html);
}

void sendLineNotify(String message) {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("WiFi disconnected! Reconnecting...");
        WiFi.disconnect();
        WiFi.begin(ssid, password);
        delay(5000);
    }

    if (WiFi.status() == WL_CONNECTED) {
        std::unique_ptr<BearSSL::WiFiClientSecure> client(new BearSSL::WiFiClientSecure);
        client->setInsecure();

        HTTPClient http;
        http.begin(*client, "https://notify-api.line.me/api/notify");
        http.addHeader("Content-Type", "application/x-www-form-urlencoded");
        http.addHeader("Authorization", "Bearer " + lineToken);

        int httpResponseCode = http.POST("message=" + message);
        Serial.print("HTTP Response code: ");
        Serial.println(httpResponseCode);
        http.end();
    }
}
